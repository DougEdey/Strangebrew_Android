/**
 * $Id: ImportXml.java,v 1.4 2007/12/28 16:41:22 jimcdiver Exp $
 *
 * This is the "driver" for xml import.  It sets up the parser, catches
 * exceptions, and associates our XmlHandler class with the parser so 
 * it can listen for events.  You create one of these and pass it an xml
 * file name (with path).  You get the resultant recipe with 
 * ImportXml.handler.getRecipe().  I wish I could figure out how
 * to just use ImportXml.getRecipe(), but it doesn't seem to work. 
 */

package ca.strangebrew;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class ImportXml  {
	
	public XmlHandler handler = null;
	public XmlStyleHandler styleHandler = null;
	public XmlBeerXmlHandler beerXmlHandler = null;
	
	public ImportXml(String fileName) {

        String type = checkFileType(new File(fileName));
        if (type.equals("promash")) {
            //TODO: Support Promash
            return;
        }
		// Use the default (non-validating) parser
		SAXParserFactory factory = SAXParserFactory.newInstance();
		Debug.print("Using Sax Parser factory: " + factory.getClass() + "\n");
		try {

			// Parse the input
			SAXParser saxParser = factory.newSAXParser();
			if (type.equalsIgnoreCase("style")){
				styleHandler = new XmlStyleHandler();
				saxParser.parse(new File(fileName), styleHandler);
			}
			if (type.equalsIgnoreCase("beerXML")){
				beerXmlHandler = new XmlBeerXmlHandler();
				saxParser.parse(new File(fileName), beerXmlHandler);
			}
			else {
				handler = new XmlHandler();
				saxParser.parse(new File(fileName), handler);
			}
				
			

		} catch (SAXParseException spe) {
			// Error generated by the parser
			System.out.println("\n** Parsing error" + ", line "
					+ spe.getLineNumber() + ", uri " + spe.getSystemId());
			System.out.println("   " + spe.getMessage());

			// Use the contained exception, if any
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			x.printStackTrace();

		} catch (SAXException sxe) {
			// Error generated by this application
			// (or a parser-initialization error)
			Exception x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			x.printStackTrace();

		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();

		} catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
		}


	}

    private String checkFileType(File f) {

        if (f.getPath().endsWith(".rec"))
            return "promash";

        // let's open it up and have a peek
        // we'll only read 10 lines

        if (f.getPath().endsWith(".qbrew") || (f.getPath().endsWith(".xml"))) {
            try {
                FileReader in = new FileReader(f);
                BufferedReader inb = new BufferedReader(in);
                String c;
                int i = 0;
                while ((c = inb.readLine()) != null && i < 10) {
                    // check for an opening tag of Recipes too
                    if (c.indexOf("BeerXML Format") > -1 || c.indexOf("<RECIPES>") > -1 )
                        return "beerxml";
                    if (c.indexOf("STRANGEBREWRECIPE") > -1)
                        return "sb";
                    if ((c.indexOf("generator=\"qbrew\"") > -1) || (c.indexOf("application=\"qbrew\"") > -1))
                        return "qbrew";
                    i++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return "";
    }


    public Recipe getRecipe() {

        if (this.handler != null) {
            return this.handler.getRecipe();
        }

        if (this.beerXmlHandler!= null) {
            return this.beerXmlHandler.getRecipe();
        }

        return null;
    }
}